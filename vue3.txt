https://www.youtube.com/watch?v=XzLuMtDelGk&list=PL6DxKON1uLOFkn6AgMTYM36aeoODs4-ny

00 Theory -----------------------------------------------------------------------------

  - Virtual DOM - vue accumulates the changes, compares the changes with DOM, then applies the changes to the DOM
  - Компонентний підхід - перевикористання комонентів, вони незалежні
  - Реактивність - реакція, перемалювання змінних з функції data(), які потім використовує директива v-model
  - Змінні в data() називаються моделями.

  - Патерн підхід: Single file component

01 Installing - 7:50 ------------------------------------------------------------------------

  - Зараз вже новий метод запуску проекта в документації, але робимо по відео:
  - npm install -g @vue/cli - globally
	- vue create . - in project folder - "." or name

02 Clean project - 10:00 --------------------------------------------------------------

  - Public/index.html - remove some lines
  - src - remove everything inside
  - main.js - we keep only one function - createApp(App).mount('#app') - mount root component

03 Create root App.vue component - 12:30 ---------------------------------------------------

  - Create this file and import it in main.js
  - In script section we always export object - it's our component
  - data() return object with variables
  - methods: field for functions

04 Likes/Dislikes - 15:00 -------------------------------------------------------------

  - Create two functions in method field
  - {{ interpolation }}

05 Vue Devtools 17:30 -----------------------------------------------------------------

  - install it in chrome - beta version for vue3 - not relevant

06 Posts - 19:00 ----------------------------------------------------------------------

  - 'scoped' in styles - only for this component
  - add null styles *{}
  - add .post styles

  - add 'posts' variable

07 Add post - 23:00 -------------------------------------------------------------------

  - Add form
  - Add styles for form parts
  - Add function for button
  - Add @submit.prevent to form, instead event.preventDefault()

08 Двобічне зв'язування - 26:00 -------------------------------------------------------

  - Add two models (variables): title and body
  - Add directive v-bind to inputs for relation data with component
  - Add @input event to inputs

09 First decomposition - 32:00 --------------------------------------------------------

  - Create "components" folder and move three components there
  - Then import them in App.vue

10 Props - 35:00 ----------------------------------------------------------------------

  - v-on:click === @click - for events
  - v-bind:posts === :posts - for props

  - Send posts array in component
  - Props cannot be changed in a component - will be error

  - 37:30 In PostForm component create data variables.

11 V-model directive - 39:00 ----------------------------------------------------------

  - Instead listener we can write v-model in inputs/lists
  - Rewrite itputs events with it
  - Реалізує двобічне зв'язування з моделлю простіше

12 Create event $emit for send data from child - 43:00 --------------------------------

  - Generate 'create' event in PostForm
  - Subscribe to this event in App.vue in PostForm attributes

13 PostItem - 46:00 -------------------------------------------------------------------

  - 

14 Create separate btn component - 50:00 -------------------------------------------------

  - Create UI folder
  - All directives, classes in atributes applied to the root element in component

15 ReUse components without imports - 54:00 -------------------------------------------------

  - In UI folder create index.js
  - import these components in main.js
  - register all components there:  app.component(component.name, component);

16 Reusable INPUT component - 56:50 --------------------------------------------------------

  - In props we need to receive modelValue from v-model
  - Bind modelValue like value in input
  - Add input event in input
  - Add updateInput method with emit 'update'

17 We can bind specific attribute v-model:value="post.title" - 1:02 -------------------------

  - In vue 3 we can add several v-model:

18 Delete post - 1:03 ------------------------------------------------------------------------

  - Make evvent emits from PostItem to PostList, and from PostList to App.vue

19 v-if - 1:07 --------------------------------------------------------------------------------

  - If there are no posts - show something
  - v-show - Does not remove posts from the DOM

20 Modal - MyDialog.vue - 1:10 -----------------------------------------------------------------

  - Write structure in MyDialog.vue, conntect in index.js in UI
  - Put PostForm in this component in App.vue

  - event.stopPropagation() - заборона вспливання: @click.stop

21 v-model modificators 1:16 --------------------------------------------------------------------

  - v-model.trim="modificatorValue" - remove spaces
  - v-model.number="modificatorValue" - string to number type

22 jsonplaceholder - 1:17 -------------------------------------------------------------------------

  - In App.vue make fetchPosts method:
  - npm i axios

23 Component life cycles - 1:20 -------------------------------------------------------------------

  - Add mouted() for fetch posts
  - Add setTimeout() for visualization proccess

24 Sorting - 1:24 ---------------------------------------------------------------------------------

  - Add MySelect component
  - localeCompare - Compares strings, returns -1 or 0 or 1

25 Watch, Computed --------------------------------------------------------------------------------------

  - Watch - the function will work when changing the model
  - Computed - the function will work depending on the nested models when they change 
               and return something

  - Watch for nested object properties:  watch: {
                                            post: {
                                              handler(newValue) {
                                                console.log(newValue);
                                              },
                                              deep: true,
                                            },
                                          },

  - Made sorting with watch, and then with computed

26 Animation - 1:39 --------------------------------------------------------------------------------------

  - https://www.youtube.com/watch?v=XzLuMtDelGk&list=PL6DxKON1uLOFkn6AgMTYM36aeoODs4-ny